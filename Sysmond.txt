#!/bin/bash
#
# sysmond -  This daemon monitors logins to system 
# 
# Description: it is a bash shell script that fakes a daemon.
# It does system measurements every specified number of minutes.
# Configuration parameters are read from a file and statistics
# are written to a log file.
#
# It keeps track of following system statistics:
#    - the total number of processes running
#    - the number of unique users logged in
#    - the number of unique users logged in remotely
#    - whether anyone is logged in under Xwindows
#    - the 15-minute load average of the system
#
# It will keep running until it is forced to exit using a signal.
# Upon receipt of a TERM signal, it output its summary information,
# then exit.
# 
# Summary output consists of:
#    - the average number of processes running
#    - what percentage of the measurements found at least one user
#        logged on
#    - the number of measurements performed
#
# default parameters: if logfile failed to read or it has 
# configuration parameters missing the values here will be used.
configfile=/etc/sysconfig/sysmond
interval=10
logfile=/spare/tmp/sysmond.log
append=yes
#
errors_seen=no
error() {
    # error function. simply outputs an error message to the logfile.
    # this function SETS THE GLOBAL VARIABLE errors_seen
    # to indicate whether errors have been seen or not.

    echo "ERROR: $*" >> "$logfile"
    errors_seen=yes
}

read_config() {
        # read_config path-to-configfile
        #
    # reads the config file and SETS THREE GLOBAL VARIABLES
    #   logfile - set to the path of the output log file
    #   append  - yes or no depending on whether the log file should be
    #           overwritten (no) or appended to (yes)
    #   interval = the number of minutes between reports
    # these variables should already have default values
        #
        # read_config calls the function error to report errors
        #       some errors cause an immediate return with a failure (1) status
        # at the end of the function, it checks the global variable
        #   errors_seen (set by the error function) and sets its return
        #   status accordingly (0 if no errors were encountered, 1 otherwise)
        #
    [ $# -ne 1 ] && { error "illegal call to read_config" ; return 1; }
    [ ! -f "$1" -o ! -r "$1" ] && { error "$1 not a readable file" ; return 1; }
    local line cfile
    cfile="$1"
    OIFS="$IFS"
    while read line; do
        # ignore empty lines and comments
        [ -z "$line" -o "${line:0:1}" = "#" ] && continue

        # chop the line on =
        IFS="="
        set -- $line
        IFS="$OIFS"

        # look for keywords and process them
        case "$1" in
            logfile)
                [ -n "$2" ] && logfile="$2" || error \
                "Configfile=$cfile - no value for logfile: line='$line'"
                    ;;
            append)
                [ "$2" = yes -o "$2" = no ] && append=$2 || error \
                "Configfile=$cfile - illegal value for append: line='$line'"
                    ;;
            interval)
                echo "$2" | grep -qE "^[[:digit:]]+$" && interval=$2 || error \
                "Configfile=$cfile - illegal value for interval: line='$line'"
                    ;;
            *)
                error "Configfile=$cfile - illegal line in $cfile:'$line'"
                    ;;
        esac
    done < "$cfile"

    # if there were any syntax errors, return failure
    [ $errors_seen = yes ] && return 1
    return 0
}

# read the config file and check the exit status
if ! read_config "$configfile" ; then
    # config file had errors or could not be read. 
    # you must decide if this is a fatal error
    # for now, this clause is just a null statement (:)
    :
fi

trap 'summary' EXIT
trap '' HUP

summary() {
        # This function when called logs the summary of
        # measurements (see top) into the log file and 
        # also outputs it to the user's termminal.
        date=$(date "+%m%d%H%M")
        avgprocs=$((nprocs_total/nmeasurements))
        userperctg=$((100*one_user_min/nmeasurements))
        log "$date: SUMMARY: $userperctg% of samples found users logged in."
        log "$date: an AVERAGE of $avgprocs processes were ruuning over $nmeasurements measurements"
        echo "$date: SUMMARY: $userperctg% of samples found users logged in."
        echo "$date: an AVERAGE of $avgprocs processes were ruuning over $nmeasurements measurements"
}

# remove the log file if append option is not set. 
[[ $append = no ]] && rm -f "$logfile"

# log function appends its arguments to log file
log() {
    echo -e "$*" >> "$logfile"
}

# the start message and header to log file
log "Sysmond started on $(hostname) at $(date | cut -d' ' -f2-6). interval = $interval minutes"
log "DATE/TIME  #PROCS  #USERS  #REMOTE  XUSERS?  LOADAV"

nmeasurements=0
nprocs_total=0
one_user_min=0
umeasurements=0

while :;do
        date=$(date "+%m%d%H%M")
        nprocs=$(ps -e | wc -l)
        ((nprocs_total+=nprocs))
        nusers=$(who | sort -u -t' ' -k1,1 | wc -l)
        who | grep -q \(unknown\) && ((nusers--))
        [ $nusers -ne 0 ] && ((one_user_min++))
        nremote=$(who | grep -E '\([[:alnum:]]+\.' | sort -u -t' ' -k1,1 | wc -l)
        if [ $(who | grep -E '\(:[[:digit:]]+\)' | wc -l) -ne 0 ]; then
                xuser=YES
        else
                xuser=NO
        fi
        loadavg=$(cat /proc/loadavg | cut -d' ' -f3)
        log "$date      $nprocs  $nusers       $nremote        $xuser      $loadavg"
        ((nmeasurements++))

        sleep $((interval * 60))s &
        wait
done